function [newMap] = addNotes(model, map)
% Function to add notes from a model to a metabolic map
%
% USAGE:
%
%   [newMap] = addNotes(model, map)
%
% INPUTS:
%   model:          COBRA model
%   map:            A parsed model structure generated by
%                   'transformXML2Map' function
%
% OUTPUT:
%   newMap:         Modified map containing notes from the model
%
% .. Authors:
%       - A.Danielsdottir 20/07/2017 LCSB. Belval. Luxembourg.
%       - N.Sompairac - Institut Curie, Paris, 20/10/2017.

    newMap = map;

    a = 'Full name:';
    b = 'Abbreviation:';
    c = 'formula:';
    d = 'Charge:';
    e = 'Descrition:';
    f = 'Annotations:';

    % Find only metabolites (no subsystems added as a unknown metabolite)
    listmets = strfind(newMap.specName, ']');
    index = ~cellfun(@isempty, listmets);
    listmets = newMap.specName(index, 1);
    % Obtain abbreviation of each metabolite (split the indicator of
    % compartment)
    g = regexp(listmets, '[', 'split');

    for i = 1:length(g)
        g2 = g{i, 1};
        abbreviation(i, 1) = g2(1);
    end

    for i = 1:length(listmets)
        met = listmets(i);
        idsModel = find(ismember(model.mets, met));
        idsNewMap = find(ismember(newMap.specName, met));

        % Avoid possible errors. Have into account possible extra IDs
        % for same metabolite (this shouldn't be)...
        if length(idsNewMap) > 1
            for v = 1:length(idsNewMap)
                idx = idsNewMap(v);
                metAbbreviation = abbreviation{i};
                metName = char(model.metNames{idsModel});
                metFormula = char(model.metFormulas(idsModel));
                metCharge = num2str(model.metCharge(idsModel));
                summary = [a metName b metAbbreviation c metFormula d metCharge e f];
                newMap.specNotes{idx, 1} = [newMap.specNotes{idx} newline summary];
            end
        else
            metAbbreviation = abbreviation{i};
            metName = char(model.metNames(idsModel));
            metFormula = char(model.metFormulas(idsModel));
            metCharge = num2str(model.metCharge(idsModel));
            summary = [a metName b metAbbreviation c metFormula d num2str(metCharge) e f];
            newMap.specNotes{idsNewMap, 1} = [newMap.specNotes{idsNewMap} newline summary];
        end
    end

    % Add reactions notes
    g = 'formula: ';
    h = 'Mechanical Confidence Score: ';
    k = 'Lower Bound: ';
    l = 'Upper Bound: ';
    m = 'Subsystem: ';
    n = 'Description: Type';

    listRxns = newMap.rxnName;
    formula = printRxnFormula(model, listRxns);

    for j = 1:length(listRxns)
        rxn = listRxns(j);
        idsModel = find(ismember(model.rxns, rxn));
        formula2 = formula{j};
        score = char(model.rxnConfidenceScores(idsModel));
        lower = num2str(model.lb(idsModel));
        upper = num2str(model.ub(idsModel));
        sub = char(model.subSystems(idsModel));
        type = char(newMap.rxnType{j});
        summary = [g, formula2, h, score, k, lower, l, upper, m, sub, n, type];
        disp(summary)
        newMap.rxnNotes{j, 1} = [newMap.rxnNotes{j}, newline, summary];
    end

end
